// <auto-generated />
using System;
using CXManagmentMVP.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CXManagmentMVP.Infrastructure.Migrations
{
    [DbContext(typeof(CXManagementDbContext))]
    [Migration("20250517115849_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Application", b =>
                {
                    b.Property<int>("CXAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXAID"));

                    b.Property<string>("CXAName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CXAID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Application_Keyword", b =>
                {
                    b.Property<int>("CXAKID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXAKID"));

                    b.Property<float?>("CXAKWeight")
                        .HasColumnType("real");

                    b.Property<int?>("CXASID")
                        .HasColumnType("int");

                    b.Property<int?>("CXKeywordID")
                        .HasColumnType("int");

                    b.HasKey("CXAKID");

                    b.HasIndex("CXASID");

                    b.HasIndex("CXKeywordID");

                    b.ToTable("ApplicationKeywords");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Customer", b =>
                {
                    b.Property<int>("CXCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXCustomerID"));

                    b.Property<string>("CXCustomerEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CXCustomerFullName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CXCustomerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CXCustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Customer_AppKeyword_Score", b =>
                {
                    b.Property<int>("CXCAKScoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXCAKScoreID"));

                    b.Property<int?>("CXASKID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CXCAKCalculatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CXCAKCalculatedScore")
                        .HasColumnType("real");

                    b.Property<int?>("CXCustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CXCAKScoreID");

                    b.HasIndex("CXASKID");

                    b.HasIndex("CXCustomerID");

                    b.ToTable("CustomerAppKeywordScores");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Customer_AppKeyword_Value", b =>
                {
                    b.Property<int>("CXCAKVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXCAKVID"));

                    b.Property<int?>("CXASKID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CXCAKVAssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CXCAKVValueString")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CXCustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CXCAKVID");

                    b.HasIndex("CXASKID");

                    b.HasIndex("CXCustomerID");

                    b.ToTable("CustomerAppKeywordValues");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_JourneyEvent", b =>
                {
                    b.Property<int>("CXCJEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXCJEID"));

                    b.Property<int?>("CXASID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CXJEFromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CXJEKeywordIDs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CXJERequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CXJEScoreSnapshot")
                        .HasColumnType("real");

                    b.Property<int?>("CXJEStage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CXJEToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CXCJEID");

                    b.HasIndex("CXASID");

                    b.ToTable("JourneyEvents");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Keyword", b =>
                {
                    b.Property<int>("CXKeywordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CXKeywordID"));

                    b.Property<string>("CXKeywordDataType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CXKeywordDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("CXKeywordIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("CXKeywordName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CXKeywordScoringFormula")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CXKeywordID");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Application_Keyword", b =>
                {
                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Application", "Application")
                        .WithMany("ApplicationKeywords")
                        .HasForeignKey("CXASID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Keyword", "Keyword")
                        .WithMany("ApplicationKeywords")
                        .HasForeignKey("CXKeywordID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Application");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Customer_AppKeyword_Score", b =>
                {
                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Application_Keyword", "ApplicationKeyword")
                        .WithMany("Scores")
                        .HasForeignKey("CXASKID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Customer", "Customer")
                        .WithMany("Scores")
                        .HasForeignKey("CXCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationKeyword");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Customer_AppKeyword_Value", b =>
                {
                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Application_Keyword", "ApplicationKeyword")
                        .WithMany("Values")
                        .HasForeignKey("CXASKID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Customer", "Customer")
                        .WithMany("Values")
                        .HasForeignKey("CXCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationKeyword");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_JourneyEvent", b =>
                {
                    b.HasOne("CXManagmentMVP.Domain.Entities.CX_Application", "Application")
                        .WithMany("JourneyEvents")
                        .HasForeignKey("CXASID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Application", b =>
                {
                    b.Navigation("ApplicationKeywords");

                    b.Navigation("JourneyEvents");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Application_Keyword", b =>
                {
                    b.Navigation("Scores");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Customer", b =>
                {
                    b.Navigation("Scores");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("CXManagmentMVP.Domain.Entities.CX_Keyword", b =>
                {
                    b.Navigation("ApplicationKeywords");
                });
#pragma warning restore 612, 618
        }
    }
}
